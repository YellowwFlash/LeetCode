âœ… Given Question:
You're given a sorted array and a target value.  
Your task is to find the index where the target should be inserted so that the array remains sorted.  
If the target already exists, return the index of its first occurrence.

âœ… Goal:
Find the first position in the array where the value is greater than or equal to the target.

âœ… Example:
Array: [1, 3, 5, 6], Target: 5 â†’ Return 2  
Array: [1, 3, 5, 6], Target: 2 â†’ Return 1  

âœ… Intuition:
We are essentially finding the lower bound of the target:
> "The first index where the array value is greater than or equal to the target."

There are two ways to approach this â€” one simple and one efficient.

------------------------------------------------------------
Approach-1: Linear Scan (Brute-force method) â€” O(n)
------------------------------------------------------------
ðŸ”¹ How it works:
- Go through the array from the beginning.
- Check each element.
- Stop when you find the first element that is greater than or equal to the target.
- That index is where the target should be inserted.
- If you reach the end and haven't found such an element, the target is greater than all values â€” insert it at the end.

ðŸ”¹ Time Complexity:  
- O(n) â†’ You might need to check every element in the worst case.

ðŸ”¹ Space Complexity:  
- O(1) â†’ No extra space is used.

------------------------------------------------------------
Approach-2: Binary Search (Optimized method) â€” O(log n)
------------------------------------------------------------
ðŸ”¹ How it works:
- Use binary search to efficiently find the insert position.
- Start with the whole array as your search space.
- Repeatedly check the middle element:
    - If itâ€™s greater than or equal to the target, the current index might be the answer, but check to the left for an earlier valid position.
    - If itâ€™s less than the target, ignore the left half and check the right.
- Eventually, youâ€™ll find the smallest index where the condition holds true.

ðŸ”¹ Time Complexity:  
- O(log n) â†’ The array size is halved at each step.

ðŸ”¹ Space Complexity:  
- O(1) â†’ Done in-place, no extra space needed.
