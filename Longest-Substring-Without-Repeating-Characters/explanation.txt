 ✅ Given Question:
 Find the length of the longest substring in a string that contains all unique characters (no repeating characters).

 ✅ Given Data:
 A string `s` consisting of lowercase letters (in Approach 1) or any character (in Approach 2).
 The goal is to return the length of the longest substring without repeating characters.

 ✅ Intuition:
 Use the sliding window technique:
 Maintain a window with two pointers (left and right) that expands when characters are unique and contracts when duplicates appear.
 Track characters inside the current window using a frequency array (Approach 1) or a HashSet (Approach 2).

 ----------------------------------------
 Approach 1: Sliding Window + Frequency Array (Only Lowercase Letters)
 ----------------------------------------
 - Use two pointers `left` and `right` to create a moving window over the string.
 - Use an integer array `frequency[26]` to track character frequencies ('a' to 'z').
 - When adding a character (right pointer) that’s not in the window (`frequency[char] == 0`), expand the window.
 - If the character is a duplicate, shrink the window from the left until the duplicate is removed.
 - Update `maxLength` with the size of the current window (right - left).

 Time Complexity:
     - O(n): Each character is visited at most twice (once by right, once by left).

 Space Complexity:
     - O(1): Fixed-size frequency array of 26 elements (for lowercase letters only).

 --------------------------------------------
 Approach 2: Sliding Window + HashSet (Generic)
 --------------------------------------------
 - Use a HashSet to track characters currently in the sliding window.
 - If the character at `right` is not in the set, add it and move `right` forward.
 - If it's a duplicate, remove characters from the left of the window until it’s removed.
 - At each step, update `maxLength` with the size of the current window (right - left).
 - This approach works with any character type, not just lowercase letters.

 Time Complexity:
     - O(n): Each character is added and removed from the set at most once.

 Space Complexity:
     - O(min(n, m)): Where `n` is the length of the string and `m` is the size of the character set (e.g., 128 for ASCII).
