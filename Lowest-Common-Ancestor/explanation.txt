 ‚úÖ Problem:
 Given a binary tree and two node values `n1` and `n2`,
 your task is to find their **Lowest Common Ancestor (LCA)**.

 The LCA of two nodes is defined as the deepest node that has both `n1` and `n2` as descendants.
 A node can also be a descendant of itself.

 ------------------------------------------------------------
 üåê Approach 1: Using Paths (Backtracking)
 ------------------------------------------------------------

 ‚úÖ Intuition:
 - The idea is to find the **path from root to `n1`** and the **path from root to `n2`**.
 - Then, compare the two paths to find the last common node in both.

 ‚úÖ Steps:
 1. Use a helper function `findPath` to collect the path from root to each target node in a list.
 2. If either path is not found (i.e., node doesn't exist in tree), return `-1`.
 3. Compare the two paths and identify the last common node ‚Äî that's the LCA.

 ‚úÖ Key Details:
 - `findPath` uses recursion and backtracking.
 - It adds each visited node to the path list and removes it if the path is not valid (backtracking).

 ‚úÖ Time Complexity:
 - O(n¬≤) in worst case:
     - For each node in path1, we scan all of path2.
     - Could be optimized using index-based comparison.

 ‚úÖ Space Complexity:
 - O(n) for storing each path (in the worst case, for skewed trees).

 ‚úÖ Example:
          1
         / \
        2   3
       / \
      4   5
  - LCA(4, 5) = 2
  - Path to 4: [1, 2, 4]
  - Path to 5: [1, 2, 5]
  - Last common element: 2

 ------------------------------------------------------------
 üåê Approach 2: Using Simple DFS (Optimal)
 ------------------------------------------------------------

 ‚úÖ Intuition:
 - Traverse the tree from the root.
 - If either `n1` or `n2` matches the current node, return that node.
 - Recursively search left and right subtrees for the targets.
 - If both left and right recursive calls return non-null, current node is the LCA.

 ‚úÖ Steps:
 1. If root is null, return null.
 2. If root matches `n1` or `n2`, return root.
 3. Recurse left and right.
 4. If both sides return non-null, return root.
 5. Otherwise, return the non-null side.

 ‚úÖ Time Complexity:
 - O(n): each node is visited once.

 ‚úÖ Space Complexity:
 - O(h), where h is the height of the tree (for recursion stack).

