âœ… Given Question:
You are given a string `num` representing a non-negative integer and an integer `k`.
You must remove exactly `k` digits from `num` so that the new number is the smallest possible.
Return the resulting number as a string (without leading zeros unless it's "0").

âœ… Given Data:
  - `num`: a string of digits (e.g., "1432219")
  - `k`: an integer (0 <= k <= num.length), number of digits to remove
  - Goal: Remove `k` digits to form the smallest possible number

âœ… Intuition:
We need to remove digits to minimize the resulting number.
The best strategy is to remove digits that are larger than the next one (like a "peak").
This is similar to keeping the number monotonically increasing as we build it.

We can simulate this process using a stack (here, `StringBuilder` works like a stack):
  - We iterate through the digits:
    - If the current digit is smaller than the one on top of the stack,
      we remove the top digit (since it makes the number bigger).
    - Do this only if we still have `k` digits left to remove.

------------------------------------------------------
Approach-1: Monotonic Stack (Greedy)
------------------------------------------------------
ðŸ”¹ Method: `removeKdigits(String num, int k)`
Steps:
  1. Create a stack (using StringBuilder) to build the smallest number.
  2. Traverse each digit in `num`:
      - While:
        - We still have digits to remove (k > 0)
        - Stack is not empty
        - Top of stack > current digit
      - Remove the top of the stack (i.e., delete a higher digit)
  3. Append the current digit to the stack.
  4. After the loop, if `k > 0`, it means we still need to remove digits:
     - Remove them from the end of the stack (which is the largest remaining).
  5. Remove leading zeros.
  6. If result is empty (all digits removed or just zeros), return `"0"`.

âœ… Time Complexity:
  - O(n), where n = length of num
    Each digit is pushed and popped at most once

âœ… Space Complexity:
  - O(n), for the stack (StringBuilder)

ðŸ”¹ Example:
    Input: num = "1432219", k = 3
    Process:
      - '1' â†’ stack = "1"
      - '4' â†’ stack = "14"
      - '3' â†’ 4 > 3 â†’ remove 4, stack = "1", k = 2 â†’ stack = "13"
      - '2' â†’ 3 > 2 â†’ remove 3, k = 1 â†’ stack = "12"
      - '2' â†’ stack = "122"
      - '1' â†’ 2 > 1 â†’ remove 2, k = 0 â†’ stack = "121"
      - '9' â†’ stack = "1219"
    Remove leading zeros â†’ "1219"

    Output: "1219"

ðŸ”¹ Edge Cases:
  - If `k == num.length` â†’ remove all digits â†’ return "0"
  - If result starts with zeros â†’ remove leading zeros
  - If all digits are in increasing order â†’ remove from the end

