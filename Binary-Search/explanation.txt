✅ Given Question:
Given a sorted array of integers and a target value, implement binary search to find the index of the target.
If the target does not exist in the array, return -1.

✅ Given Data:
An integer array int[] nums (sorted in non-decreasing order), and an integer target.
    - The array may contain any number of elements, including 0.
    - If the target is found, return its index.
    - If not found, return -1.

✅ Intuition:
Binary Search is an efficient algorithm to find an element in a sorted array. 
It repeatedly divides the search interval in half, comparing the middle element with the target.
This significantly reduces the time complexity from O(n) (linear search) to O(log n).

------------------------------------------------------------
Approach-1: Iterative Binary Search
------------------------------------------------------------
    - Use two pointers, `left` and `right`, to define the current search window.
    - Calculate the middle index using: `mid = left + (right - left) / 2` (to avoid overflow).
    - Compare the middle element with the target:
        - If equal, return the index.
        - If target > mid element, search in the right half (`left = mid + 1`).
        - If target < mid element, search in the left half (`right = mid - 1`).
    - Repeat until `left > right`. If not found, return -1.

    Time Complexity:
        - O(log n), where n is the number of elements in the array.

    Space Complexity:
        - O(1), no extra memory used.


------------------------------------------------------------
Approach-2: Recursive Binary Search
------------------------------------------------------------
    - Similar logic as iterative approach, but implemented using recursion.
    - Create a helper function that takes additional parameters: `low` and `high`.
    - At each recursive call:
        - Calculate the mid index.
        - Compare mid element with target.
        - Recur on the left or right sub-array accordingly.
        - Base case: If `low > high`, return -1 (target not found).

    Time Complexity:
        - O(log n), due to halving the search space at each recursive call.

    Space Complexity:
        - O(log n), because of recursive call stack.