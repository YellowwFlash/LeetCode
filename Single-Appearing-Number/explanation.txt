✅ Given Question:
Given a non-empty array of integers `arr`, every element appears exactly twice except for one element, which appears only once. Return that single element.

✅ Given Data:
An integer array int[] nums where:
    - All elements appear twice except for one unique element that appears once.
    - Array is non-empty.
    - In some cases, the array is sorted (especially for the binary search approach).

✅ Intuition:
The problem asks us to find the element that is not repeated in an array where all others appear exactly twice.

This can be solved using three main approaches:
1. A frequency map using HashMap (intuitive and easy to understand).
2. Bit manipulation using XOR (optimized and clever).
3. Modified binary search for sorted arrays (efficient and tricky to derive).

-----------------------------------
Approach-1: Using HashMap (Intuitive Approach)
-----------------------------------
    - Create a HashMap to store the frequency of each number.
    - Traverse the array:
        - For each number, update its frequency in the map using map.getOrDefault().
    - After building the frequency map, traverse its entries:
        - Return the key (number) with value equal to 1.

    Time Complexity:
        - O(n) for building the map
        - O(n) for scanning the map
        - Total: O(n)

    Space Complexity:
        - O(n) for the map

    Note:
        - This approach is simple and intuitive but requires extra space.
        - It works well for small inputs or when readability is important.

-----------------------------------
Approach-2: Using XOR Operator (Optimized Approach)
-----------------------------------
    - Initialize result = 0.
    - Traverse the array:
        - XOR each number with result.
        - Use the property: a ^ a = 0 and a ^ 0 = a
    - After the loop, result holds the number that appears once.

    Time Complexity:
        - O(n), single pass through the array

    Space Complexity:
        - O(1), no extra space used

    Note:
        - This approach is space-efficient and fast.
        - It relies on XOR properties and is harder to derive intuitively but performs better.

-----------------------------------------------------------------------
Approach-3: Using Modified Binary Search (For Sorted Arrays Only)
-----------------------------------------------------------------------
    ✅ Key Observation:
        - All elements before the single element follow the pattern: [even index] == [even + 1]
        → Example: 1, 1 → indexes 0 and 1  
        - All elements after the single element follow the pattern: [odd index] == [odd + 1]
        → Because the single element shifted the pattern by one place

    ✅ Simple Example:
    nums = [1, 1, 2, 3, 3, 4, 4]

    - Indexes:  0  1  2  3  4  5  6
    - Elements: 1  1  2  3  3  4  4
    - Observe:
        - Pairs at (0,1), (3,4), (5,6) → all good
        - But index 2 (value 2) stands alone → This is the single element

    ✅ How Binary Search Helps:
        - Use binary search to check mid-index and its neighbors.
        - Decide which half of the array to search next based on how pairing behaves at mid.

    ✅ How to Eliminate Halves:
        1. Check if mid is even:
            - If `nums[mid] == nums[mid + 1]`, the left part up to mid is perfectly paired → single element must be on the right.
            - Else, the pairing is broken → single element is on the left (including mid).

        2. Check if mid is odd:
            - If `nums[mid] == nums[mid - 1]`, the left part is still valid → search in the right half.
            - Else, the pairing is broken → single element is on the left half.

    ✅ Why This Works:
        - Before the single element: pairs are in even-odd positions (0-1, 2-3, …)
        - After the single element: everything shifts → now pairs are in odd-even (3-4, 5-6, …)
        - Using this pattern, you eliminate half of the array at every step!

    ✅ Time Complexity:
        - O(log n) — efficient due to binary search

    ✅ Space Complexity:
        - O(1) — no extra space used