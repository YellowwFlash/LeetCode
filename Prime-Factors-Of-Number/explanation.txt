 âœ… Given Question:
 Find all **distinct prime factors** of a given number `n`.

 âœ… Given Data:
 A single integer `n` where n >= 1.
 You must return a list of **distinct prime factors** of `n`.

 âœ… Intuition:
 This problem can be solved in multiple ways:
     - By checking all numbers from 1 to n and seeing if they divide n and are prime.
     - By checking up to âˆšn and leveraging factor pairs (cascade method).
     - By dividing out all prime factors efficiently using trial division (optimized approach).

 ------------------------------------------------------
 Approach-1: Full Traversal (Brute Force)
 ------------------------------------------------------
 ðŸ”¹ Method: `findPrimeFactorsIteration(int n)`
 - Iterate from 1 to n.
 - For each i, check:
     - If i divides n (i.e., n % i == 0).
     - If i is prime using `isPrime(i)`.
 - Add such i to the result list.

 âœ… Time Complexity:
     - O(n * sqrt(n)) due to prime checking for each i

 âœ… Space Complexity:
     - O(k), where k is the number of distinct prime factors

 ------------------------------------------------------
 Approach-2: Cascade Method (Better Factor Checking)
 ------------------------------------------------------
 ðŸ”¹ Method: `findPrimeFactorsCascade(int n)`
 - Iterate from 1 to âˆšn.
 - For each i, check:
     - If i divides n and is prime â†’ add i
     - If (n / i) is different from i and prime â†’ add n / i

 ðŸ”¹ Why it works:
 - Any factor > âˆšn has a paired factor < âˆšn.
 - So we cover all factor pairs without iterating up to n.

 âœ… Time Complexity:
     - O(âˆšn * sqrt(n)) â†’ Because isPrime takes up to âˆši time

 âœ… Space Complexity:
     - O(k), where k is the number of distinct prime factors

 ------------------------------------------------------
 Approach-3: Optimized Prime Factorization (Efficient)
 ------------------------------------------------------
 ðŸ”¹ Method: `findPrimeFactors(int n)`
 - Iterate from 2 to âˆšn.
 - For each i:
     - While i divides n:
         - Add i to result list (once).
         - Divide n by i repeatedly to remove all powers of i.
 - If n > 1 at the end, it's a prime and added to result.

 ðŸ”¹ Why it works:
 - This is the standard trial division algorithm.
 - It efficiently eliminates all prime factors from n.

 âœ… Time Complexity:
     - O(âˆšn) in practice (very fast for moderate n)

 âœ… Space Complexity:
     - O(k), where k is the number of distinct prime factors

