âœ… Given Question:  
Given an integer array `nums`, find the length of the longest contiguous subarray that sums to 0. Return the length of this subarray.

âœ… Given Data:  
An integer array `int[] nums` that may contain positive, negative, or zero values.  
We need to find the maximum length of a subarray (contiguous elements) whose elements sum to zero.

âœ… Intuition:  
When traversing the array, we keep track of the prefix sum (i.e., cumulative sum from the start to the current index).  
If at any point the same prefix sum occurs more than once, it means that the elements between those two indices sum to zero.  
Why? Because the sum between two identical prefix sums cancels out.

To efficiently track this, we use a HashMap that stores the first occurrence of each prefix sum.  
If the prefix sum becomes zero at index `i`, it means the subarray from the beginning up to `i` has a sum of 0.

--------------------------------------  
Approach 1: Prefix Sum + HashMap  
--------------------------------------  
- Initialize:
  - `prefixSum = 0`: running total of the elements
  - `longestLength = 0`: to store the length of the longest subarray with sum 0
  - `map = HashMap<Integer, Integer>` to store the first index where each prefix sum occurred.

- Iterate through the array:
  - Add current element to `prefixSum`
  - If `prefixSum == 0`, it means the entire array up to current index sums to 0 â†’ update `longestLength = i + 1`
  - If `prefixSum` exists in `map`, it means there is a subarray between previous index and current index that sums to 0 â†’ update `longestLength = max(longestLength, i - map.get(prefixSum))`
  - If `prefixSum` doesn't exist in the map, store it with current index: `map.put(prefixSum, i)`

- Return `longestLength`

ðŸ§  Why store only the first occurrence of prefix sum?
  - To maximize the length of the subarray with sum 0, we want the earliest previous index that had the same prefix sum.

--------------------------------------  
Time Complexity:  
    - O(n): Single traversal through the array

Space Complexity:  
    - O(n): In the worst case, we store all unique prefix sums

ðŸ“Œ Example:  
Input: `nums = [1, 2, -3, 3, -1, 2, -2]`  
Prefix sums: `[1, 3, 0, 3, 2, 4, 2]`  
Subarrays with zero sum:  
  - From index 0 to 2: sum = 0 â†’ length 3  
  - From index 1 to 3: sum = 0 â†’ length 3  
  - From index 4 to 6: sum = 0 â†’ length 3  
Longest length = 3
