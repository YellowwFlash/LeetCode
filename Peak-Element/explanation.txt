✅ Given Question:
Find a peak element in an array. A peak element is one that is strictly greater than its neighbors.

✅ Given Data:
- Input: An integer array `nums[]`
- Constraint: Adjacent elements are not equal (i.e., nums[i] ≠ nums[i+1])
- A peak is defined as: nums[i] > nums[i - 1] and nums[i] > nums[i + 1]
- Array may contain multiple peaks — return the value of **any one** peak

✅ Intuition:
The array may contain multiple elements that are greater than both neighbors (peaks). We just need to find **one** of them efficiently. We can either scan linearly to find such a peak, or use a binary search strategy by observing the slope (increasing or decreasing) between elements to eliminate half the array at each step.

------------------------------------------------------------
Approach 1: Linear Scan (Brute Force)
------------------------------------------------------------
    - This approach checks every element to find if it is greater than its neighbors.
    - Edge elements (first and last) are handled separately since they only have one neighbor.
    - Traverse from index 1 to n-2 and check if nums[i] > nums[i-1] and nums[i] > nums[i+1]
    - Return the first such element found.

    Time Complexity:
        - O(n) → Full traversal of the array

    Space Complexity:
        - O(1) → No extra space used

    When to Use:
        - Simple to implement and understand
        - Suitable for small arrays or cases where performance is not critical

------------------------------------------------------------
Approach 2: Binary Search (Optimized Approach)
------------------------------------------------------------
    - We use binary search to find a peak in O(log n) time.
    - At each step, we check the middle element (mid) and compare it with its neighbors:
        - If nums[mid] > nums[mid - 1] && nums[mid] > nums[mid + 1], then it's a peak → return it
        - If nums[mid - 1] > nums[mid], we move to the **left half**
        - Else if nums[mid + 1] > nums[mid], we move to the **right half**

    🔍 Why Move Left If Left Neighbor Is Bigger?
        - This suggests we are on a **descending slope**
        - That means a peak must exist **somewhere to the left**
        - It could be the element at mid-1, or even further left
        - Because in such a slope (in a strictly decreasing region), eventually the elements must increase again or end at a peak (especially since edges can also be peaks)
        - So we eliminate the **right half** and move left

    🔍 Why Move Right If Right Neighbor Is Bigger?
        - This means we are on an **ascending slope**
        - Which implies a peak exists to the **right**
        - It could be the element at mid+1 or even further right
        - So we eliminate the **left half** and search the right

    ✅ This guarantees that a peak will always be found because:
        - An ascending slope leads to a peak
        - A descending slope leads to a peak
        - If the current element is greater than both neighbors, it’s already a peak

    Time Complexity:
        - O(log n) → Each step halves the search range

    Space Complexity:
        - O(1) → No additional memory used

    When to Use:
        - Ideal for large arrays or when time efficiency is needed
        - Works best when adjacent elements are guaranteed to be unequal (no duplicates)
