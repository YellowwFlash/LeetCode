âœ… Given Question:
Given an integer array, move all zero elements to the end while maintaining the relative order of the non-zero elements.

âœ… Given Data:
An integer array `int[] numbers`.

âœ… Intuition:
The goal is to move all zeros to the end of the array without affecting the order of non-zero elements. A brute-force way would involve creating a new array and copying elements, but this uses extra space.
Instead, we use an in-place indexing technique to do it efficiently in O(n) time and O(1) space.
The key is to iterate through the array, placing each non-zero element at the next available position (`index`) and then filling the rest of the array with zeros.

-------------------------------------------------------
Approach: In-place Indexing Technique
-------------------------------------------------------
    - Initialize an index pointer at 0.
    - Traverse the array:
        - If an element is non-zero, assign it to the current index and increment the index.
    - After traversal:
        - From `index` to end of array, assign 0.

    Time Complexity:
        - Single pass to move non-zeros: O(n)
        - Another pass to fill zeros: O(n)
        - Total: O(n)

    Space Complexity:
        - In-place manipulation: O(1)

ðŸ“Œ Small Example:
    Input: numbers = [0, 1, 0, 3, 12]
    - Non-zero elements moved to front: [1, 3, 12]
    - Zeros filled in remaining slots: [1, 3, 12, 0, 0]

    Answer: [1, 3, 12, 0, 0]