✅ Given Question:  
Count the number of reverse pairs in an array.  
A reverse pair is defined as a pair (i, j) such that i < j and nums[i] > 2 * nums[j].  
The goal is to find the total number of such reverse pairs in the given array.

✅ Given Data:  
A single unsorted integer array `nums` of length `n`.  
You are required to count how many (i, j) pairs exist where i < j and nums[i] > 2 * nums[j].

✅ Intuition:  
This problem is a variant of the inversion count problem, but instead of simply comparing `nums[i] > nums[j]`, we check for a stricter condition:  
`nums[i] > 2 * nums[j]`.  

While a brute-force O(n²) solution works for small arrays, it becomes inefficient for large inputs.  
To optimize, we use a modified merge sort that not only sorts the array but also counts the reverse pairs during the merge phase.

------------------------------------------------------------  
Approach 1: Brute-Force Using Two Loops  
------------------------------------------------------------  
- Iterate over all pairs `(i, j)` such that i < j.  
- For each pair, check if `nums[i] > 2 * nums[j]`.  
- Count each such pair as a reverse pair.  
- To avoid overflow when multiplying large integers (e.g., 2 * 2147483647), we cast both values to `long`.

Time Complexity:  
    - O(n²): Every pair is checked.  
Space Complexity:  
    - O(1): No extra memory used.

Steps:  
1. Initialize `pairs = 0`.  
2. Loop `i` from 0 to n-2.  
3. For each `i`, loop `j` from i+1 to n-1.  
4. If `(long)nums[i] > 2L * nums[j]`, increment the `pairs` count.  
5. Return `pairs`.

⚠️ Important: Typecasting to `long` is crucial to prevent overflow in edge cases involving large numbers.

------------------------------------------------------------  
Approach 2: Optimized Merge Sort Based Method  
------------------------------------------------------------  
- This approach is based on merge sort and improves efficiency using divide and conquer.  
- It splits the array recursively, counts reverse pairs between two sorted halves, and then merges them.  
- While merging, it counts the number of right-side elements that satisfy the condition `nums[i] > 2 * nums[j]`.

✅ Why Use (long)?  
To avoid integer overflow while checking `nums[i] > 2 * nums[j]`,  
the comparison is done using: `(long)nums[i] > 2L * nums[j]`.

✅ Example Intuition:  
Left: [5, 10]  
Right: [1, 3]  
- For 5:  
  - 5 > 2*1 → Yes  
  - 5 > 2*3 → No  
→ 1 reverse pair  
- For 10:  
  - 10 > 2*1 → Yes  
  - 10 > 2*3 → Yes  
→ 2 reverse pairs  
Total: 3 reverse pairs

✅ Explanation of Key Functions:

- `reversePairsMergeSort(int[] nums)`  
    Starts the recursive merge and count process.

- `merge(int[] nums, int low, int high)`  
    Recursively divides the array and combines the result.

- `countPairs(int[] nums, int low, int mid, int high)`  
    Counts reverse pairs across the left and right sorted halves.  
    Efficiently uses one forward scan with two pointers.

- `mergeSort(int[] nums, int low, int mid, int high)`  
    Merges the two sorted halves using an ArrayList to temporarily store sorted values.  
    After merging, the original array segment is overwritten with the sorted result.

Time Complexity:  
    - O(n log n): Due to recursive division and linear merge/count phase.  
Space Complexity:  
    - O(n): Temporary list is used during merging.

✅ Advantages:  
- Significantly faster than brute-force for large inputs.  
- Correctly handles large values using `long` casting.

