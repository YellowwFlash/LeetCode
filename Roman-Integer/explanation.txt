✅ Problem:
Convert a Roman numeral string into its corresponding integer value.

✅ Background:
Roman numerals are made up of characters that each represent a value:
- I = 1     V = 5     X = 10
- L = 50    C = 100   D = 500
- M = 1000

Sometimes, smaller values placed before larger values indicate subtraction:
- IV = 4     IX = 9
- XL = 40    XC = 90
- CD = 400   CM = 900

✅ Approach:
We loop through the characters of the Roman string one by one and check for special subtraction cases by looking ahead at the next character (if it exists). 
If a valid two-character Roman numeral (like "IV" or "CM") is found, we add its value and move the pointer forward by 2. 
Otherwise, we just add the value of the single Roman character and move by 1.

🔍 Code Walkthrough:
1. Convert the Roman string into a character array for easier indexing.
2. Initialize `index = 0` to track the current character, and `number = 0` to store the result.
3. Loop until we've processed all characters in the array.
4. Use a switch-case statement to handle different Roman numeral symbols:
   - For symbols like 'I', 'X', and 'C', we check the next character (if it exists) to determine if a special case like "IV" or "XC" applies.
   - If a special case is matched, we add the corresponding value (e.g., 4 for "IV") and move the index by 2.
   - If not, we add the basic value (e.g., 1 for "I") and move the index by 1.
5. For other symbols like 'V', 'L', 'D', and 'M', which don't participate in subtraction cases, we simply add their fixed values.
6. At the end of the loop, `number` holds the full integer representation of the Roman numeral.


🕒 Time Complexity: O(n), where n is the length of the Roman string.
🧠 Space Complexity: O(1), as we only use a few variables.

